{"ast":null,"code":"import React from\"react\";import ReactTags from\"react-tag-autocomplete\";function ClassFilter(props){var handleAddition=function handleAddition(newTag){/**\n     * Need this type check as we expect tagId to be number while the `react-tag-autocomplete` has \n     * id as number | string. \n     */if(typeof newTag.id==='string'){throw Error(\"Invalid tag id received from ReactTags\");}else{props.handleClassAdd({id:newTag.id,name:newTag.name});}};return/*#__PURE__*/React.createElement(ReactTags,{tags:props.classes,autofocus:false,suggestions:props.suggestedClasses,handleDelete:props.handleClassDelete,handleAddition:handleAddition,minQueryLength:0,placeholder:\"add new class...\"});}export default ClassFilter;","map":{"version":3,"sources":["/home/ubuntu/DashAI/captum/insights/attr_vis/frontend/src/components/ClassFilter.tsx"],"names":["React","ReactTags","ClassFilter","props","handleAddition","newTag","id","Error","handleClassAdd","name","classes","suggestedClasses","handleClassDelete"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,SAAP,KAAsB,wBAAtB,CAUA,QAASC,CAAAA,WAAT,CAAqBC,KAArB,CAA8C,CAE5C,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,MAAD,CAAmD,CACxE;;;OAIA,GAAG,MAAOA,CAAAA,MAAM,CAACC,EAAd,GAAqB,QAAxB,CAAkC,CAChC,KAAMC,CAAAA,KAAK,CAAC,wCAAD,CAAX,CACD,CAFD,IAEO,CACLJ,KAAK,CAACK,cAAN,CAAqB,CAACF,EAAE,CAAED,MAAM,CAACC,EAAZ,CAAgBG,IAAI,CAAEJ,MAAM,CAACI,IAA7B,CAArB,EACD,CACF,CAVD,CAYA,mBACE,oBAAC,SAAD,EACE,IAAI,CAAEN,KAAK,CAACO,OADd,CAEE,SAAS,CAAE,KAFb,CAGE,WAAW,CAAEP,KAAK,CAACQ,gBAHrB,CAIE,YAAY,CAAER,KAAK,CAACS,iBAJtB,CAKE,cAAc,CAAER,cALlB,CAME,cAAc,CAAE,CANlB,CAOE,WAAW,CAAC,kBAPd,EADF,CAWD,CAED,cAAeF,CAAAA,WAAf","sourcesContent":["import React from \"react\";\nimport ReactTags from \"react-tag-autocomplete\";\nimport { TagClass } from \"../models/filter\";\n\ninterface ClassFilterProps {\n  suggestedClasses: TagClass[];\n  classes: TagClass[];\n  handleClassDelete: (classId: number) => void;\n  handleClassAdd: (newClass: TagClass) => void;\n}\n\nfunction ClassFilter(props: ClassFilterProps) {\n\n  const handleAddition = (newTag: { id: number | string, name: string }) => {\n    /**\n     * Need this type check as we expect tagId to be number while the `react-tag-autocomplete` has \n     * id as number | string. \n     */\n    if(typeof newTag.id === 'string') {\n      throw Error(\"Invalid tag id received from ReactTags\");\n    } else {\n      props.handleClassAdd({id: newTag.id, name: newTag.name}); \n    }\n  }\n\n  return (\n    <ReactTags\n      tags={props.classes}\n      autofocus={false}\n      suggestions={props.suggestedClasses}\n      handleDelete={props.handleClassDelete}\n      handleAddition={handleAddition}\n      minQueryLength={0}\n      placeholder=\"add new class...\"\n    />\n  );\n}\n\nexport default ClassFilter;\n"]},"metadata":{},"sourceType":"module"}